// Code generated by ent, DO NOT EDIT.

package ingridient

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ingridient type in the database.
	Label = "ingridient"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAlcohol holds the string denoting the alcohol field in the database.
	FieldAlcohol = "alcohol"
	// FieldIsDry holds the string denoting the isdry field in the database.
	FieldIsDry = "is_dry"
	// FieldMeasurmentUnit holds the string denoting the measurmentunit field in the database.
	FieldMeasurmentUnit = "measurment_unit"
	// EdgeStock holds the string denoting the stock edge name in mutations.
	EdgeStock = "stock"
	// Table holds the table name of the ingridient in the database.
	Table = "ingridients"
	// StockTable is the table that holds the stock relation/edge.
	StockTable = "stockpiles"
	// StockInverseTable is the table name for the Stockpile entity.
	// It exists in this package in order to avoid circular dependency with the "stockpile" package.
	StockInverseTable = "stockpiles"
	// StockColumn is the table column denoting the stock relation/edge.
	StockColumn = "ingridient_stock"
)

// Columns holds all SQL columns for ingridient fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAlcohol,
	FieldIsDry,
	FieldMeasurmentUnit,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAlcohol holds the default value on creation for the "alcohol" field.
	DefaultAlcohol float64
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// MeasurmentUnit defines the type for the "measurmentUnit" enum field.
type MeasurmentUnit string

// MeasurmentUnit values.
const (
	MeasurmentUnitMl  MeasurmentUnit = "ml"
	MeasurmentUnitG   MeasurmentUnit = "g"
	MeasurmentUnitPcs MeasurmentUnit = "pcs"
)

func (mu MeasurmentUnit) String() string {
	return string(mu)
}

// MeasurmentUnitValidator is a validator for the "measurmentUnit" field enum values. It is called by the builders before save.
func MeasurmentUnitValidator(mu MeasurmentUnit) error {
	switch mu {
	case MeasurmentUnitMl, MeasurmentUnitG, MeasurmentUnitPcs:
		return nil
	default:
		return fmt.Errorf("ingridient: invalid enum value for measurmentUnit field: %q", mu)
	}
}

// OrderOption defines the ordering options for the Ingridient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAlcohol orders the results by the alcohol field.
func ByAlcohol(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlcohol, opts...).ToFunc()
}

// ByIsDry orders the results by the isDry field.
func ByIsDry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDry, opts...).ToFunc()
}

// ByMeasurmentUnit orders the results by the measurmentUnit field.
func ByMeasurmentUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMeasurmentUnit, opts...).ToFunc()
}

// ByStockCount orders the results by stock count.
func ByStockCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStockStep(), opts...)
	}
}

// ByStock orders the results by stock terms.
func ByStock(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStockStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStockStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StockInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StockTable, StockColumn),
	)
}
