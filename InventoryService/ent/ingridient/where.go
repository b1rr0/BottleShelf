// Code generated by ent, DO NOT EDIT.

package ingridient

import (
	"userService/m/v2/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldName, v))
}

// Alcohol applies equality check predicate on the "alcohol" field. It's identical to AlcoholEQ.
func Alcohol(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldAlcohol, v))
}

// IsDry applies equality check predicate on the "isDry" field. It's identical to IsDryEQ.
func IsDry(v bool) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldIsDry, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldContainsFold(FieldName, v))
}

// AlcoholEQ applies the EQ predicate on the "alcohol" field.
func AlcoholEQ(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldAlcohol, v))
}

// AlcoholNEQ applies the NEQ predicate on the "alcohol" field.
func AlcoholNEQ(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNEQ(FieldAlcohol, v))
}

// AlcoholIn applies the In predicate on the "alcohol" field.
func AlcoholIn(vs ...float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldIn(FieldAlcohol, vs...))
}

// AlcoholNotIn applies the NotIn predicate on the "alcohol" field.
func AlcoholNotIn(vs ...float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNotIn(FieldAlcohol, vs...))
}

// AlcoholGT applies the GT predicate on the "alcohol" field.
func AlcoholGT(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldGT(FieldAlcohol, v))
}

// AlcoholGTE applies the GTE predicate on the "alcohol" field.
func AlcoholGTE(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldGTE(FieldAlcohol, v))
}

// AlcoholLT applies the LT predicate on the "alcohol" field.
func AlcoholLT(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldLT(FieldAlcohol, v))
}

// AlcoholLTE applies the LTE predicate on the "alcohol" field.
func AlcoholLTE(v float64) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldLTE(FieldAlcohol, v))
}

// IsDryEQ applies the EQ predicate on the "isDry" field.
func IsDryEQ(v bool) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldIsDry, v))
}

// IsDryNEQ applies the NEQ predicate on the "isDry" field.
func IsDryNEQ(v bool) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNEQ(FieldIsDry, v))
}

// MeasurmentUnitEQ applies the EQ predicate on the "measurmentUnit" field.
func MeasurmentUnitEQ(v MeasurmentUnit) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldEQ(FieldMeasurmentUnit, v))
}

// MeasurmentUnitNEQ applies the NEQ predicate on the "measurmentUnit" field.
func MeasurmentUnitNEQ(v MeasurmentUnit) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNEQ(FieldMeasurmentUnit, v))
}

// MeasurmentUnitIn applies the In predicate on the "measurmentUnit" field.
func MeasurmentUnitIn(vs ...MeasurmentUnit) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldIn(FieldMeasurmentUnit, vs...))
}

// MeasurmentUnitNotIn applies the NotIn predicate on the "measurmentUnit" field.
func MeasurmentUnitNotIn(vs ...MeasurmentUnit) predicate.Ingridient {
	return predicate.Ingridient(sql.FieldNotIn(FieldMeasurmentUnit, vs...))
}

// HasStock applies the HasEdge predicate on the "stock" edge.
func HasStock() predicate.Ingridient {
	return predicate.Ingridient(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StockTable, StockColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockWith applies the HasEdge predicate on the "stock" edge with a given conditions (other predicates).
func HasStockWith(preds ...predicate.Stockpile) predicate.Ingridient {
	return predicate.Ingridient(func(s *sql.Selector) {
		step := newStockStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ingridient) predicate.Ingridient {
	return predicate.Ingridient(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ingridient) predicate.Ingridient {
	return predicate.Ingridient(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ingridient) predicate.Ingridient {
	return predicate.Ingridient(sql.NotPredicates(p))
}
