// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"userService/m/v2/ent/ingridient"
	"userService/m/v2/ent/predicate"
	"userService/m/v2/ent/stockpile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// StockpileUpdate is the builder for updating Stockpile entities.
type StockpileUpdate struct {
	config
	hooks    []Hook
	mutation *StockpileMutation
}

// Where appends a list predicates to the StockpileUpdate builder.
func (su *StockpileUpdate) Where(ps ...predicate.Stockpile) *StockpileUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetIngridientId sets the "ingridientId" field.
func (su *StockpileUpdate) SetIngridientId(u uuid.UUID) *StockpileUpdate {
	su.mutation.SetIngridientId(u)
	return su
}

// SetOwnerId sets the "ownerId" field.
func (su *StockpileUpdate) SetOwnerId(u uuid.UUID) *StockpileUpdate {
	su.mutation.SetOwnerId(u)
	return su
}

// SetQuantity sets the "quantity" field.
func (su *StockpileUpdate) SetQuantity(i int64) *StockpileUpdate {
	su.mutation.ResetQuantity()
	su.mutation.SetQuantity(i)
	return su
}

// AddQuantity adds i to the "quantity" field.
func (su *StockpileUpdate) AddQuantity(i int64) *StockpileUpdate {
	su.mutation.AddQuantity(i)
	return su
}

// SetIngridientID sets the "ingridient" edge to the Ingridient entity by ID.
func (su *StockpileUpdate) SetIngridientID(id uuid.UUID) *StockpileUpdate {
	su.mutation.SetIngridientID(id)
	return su
}

// SetNillableIngridientID sets the "ingridient" edge to the Ingridient entity by ID if the given value is not nil.
func (su *StockpileUpdate) SetNillableIngridientID(id *uuid.UUID) *StockpileUpdate {
	if id != nil {
		su = su.SetIngridientID(*id)
	}
	return su
}

// SetIngridient sets the "ingridient" edge to the Ingridient entity.
func (su *StockpileUpdate) SetIngridient(i *Ingridient) *StockpileUpdate {
	return su.SetIngridientID(i.ID)
}

// Mutation returns the StockpileMutation object of the builder.
func (su *StockpileUpdate) Mutation() *StockpileMutation {
	return su.mutation
}

// ClearIngridient clears the "ingridient" edge to the Ingridient entity.
func (su *StockpileUpdate) ClearIngridient() *StockpileUpdate {
	su.mutation.ClearIngridient()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StockpileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StockpileUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StockpileUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StockpileUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StockpileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stockpile.Table, stockpile.Columns, sqlgraph.NewFieldSpec(stockpile.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.IngridientId(); ok {
		_spec.SetField(stockpile.FieldIngridientId, field.TypeUUID, value)
	}
	if value, ok := su.mutation.OwnerId(); ok {
		_spec.SetField(stockpile.FieldOwnerId, field.TypeUUID, value)
	}
	if value, ok := su.mutation.Quantity(); ok {
		_spec.SetField(stockpile.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedQuantity(); ok {
		_spec.AddField(stockpile.FieldQuantity, field.TypeInt64, value)
	}
	if su.mutation.IngridientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockpile.IngridientTable,
			Columns: []string{stockpile.IngridientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingridient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.IngridientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockpile.IngridientTable,
			Columns: []string{stockpile.IngridientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingridient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockpile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StockpileUpdateOne is the builder for updating a single Stockpile entity.
type StockpileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockpileMutation
}

// SetIngridientId sets the "ingridientId" field.
func (suo *StockpileUpdateOne) SetIngridientId(u uuid.UUID) *StockpileUpdateOne {
	suo.mutation.SetIngridientId(u)
	return suo
}

// SetOwnerId sets the "ownerId" field.
func (suo *StockpileUpdateOne) SetOwnerId(u uuid.UUID) *StockpileUpdateOne {
	suo.mutation.SetOwnerId(u)
	return suo
}

// SetQuantity sets the "quantity" field.
func (suo *StockpileUpdateOne) SetQuantity(i int64) *StockpileUpdateOne {
	suo.mutation.ResetQuantity()
	suo.mutation.SetQuantity(i)
	return suo
}

// AddQuantity adds i to the "quantity" field.
func (suo *StockpileUpdateOne) AddQuantity(i int64) *StockpileUpdateOne {
	suo.mutation.AddQuantity(i)
	return suo
}

// SetIngridientID sets the "ingridient" edge to the Ingridient entity by ID.
func (suo *StockpileUpdateOne) SetIngridientID(id uuid.UUID) *StockpileUpdateOne {
	suo.mutation.SetIngridientID(id)
	return suo
}

// SetNillableIngridientID sets the "ingridient" edge to the Ingridient entity by ID if the given value is not nil.
func (suo *StockpileUpdateOne) SetNillableIngridientID(id *uuid.UUID) *StockpileUpdateOne {
	if id != nil {
		suo = suo.SetIngridientID(*id)
	}
	return suo
}

// SetIngridient sets the "ingridient" edge to the Ingridient entity.
func (suo *StockpileUpdateOne) SetIngridient(i *Ingridient) *StockpileUpdateOne {
	return suo.SetIngridientID(i.ID)
}

// Mutation returns the StockpileMutation object of the builder.
func (suo *StockpileUpdateOne) Mutation() *StockpileMutation {
	return suo.mutation
}

// ClearIngridient clears the "ingridient" edge to the Ingridient entity.
func (suo *StockpileUpdateOne) ClearIngridient() *StockpileUpdateOne {
	suo.mutation.ClearIngridient()
	return suo
}

// Where appends a list predicates to the StockpileUpdate builder.
func (suo *StockpileUpdateOne) Where(ps ...predicate.Stockpile) *StockpileUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StockpileUpdateOne) Select(field string, fields ...string) *StockpileUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stockpile entity.
func (suo *StockpileUpdateOne) Save(ctx context.Context) (*Stockpile, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StockpileUpdateOne) SaveX(ctx context.Context) *Stockpile {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StockpileUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StockpileUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StockpileUpdateOne) sqlSave(ctx context.Context) (_node *Stockpile, err error) {
	_spec := sqlgraph.NewUpdateSpec(stockpile.Table, stockpile.Columns, sqlgraph.NewFieldSpec(stockpile.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stockpile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stockpile.FieldID)
		for _, f := range fields {
			if !stockpile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stockpile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.IngridientId(); ok {
		_spec.SetField(stockpile.FieldIngridientId, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.OwnerId(); ok {
		_spec.SetField(stockpile.FieldOwnerId, field.TypeUUID, value)
	}
	if value, ok := suo.mutation.Quantity(); ok {
		_spec.SetField(stockpile.FieldQuantity, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedQuantity(); ok {
		_spec.AddField(stockpile.FieldQuantity, field.TypeInt64, value)
	}
	if suo.mutation.IngridientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockpile.IngridientTable,
			Columns: []string{stockpile.IngridientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingridient.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.IngridientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockpile.IngridientTable,
			Columns: []string{stockpile.IngridientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ingridient.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Stockpile{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockpile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
