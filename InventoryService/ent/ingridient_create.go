// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"inventoryService/m/v2/ent/ingridient"
	"inventoryService/m/v2/ent/stockpile"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IngridientCreate is the builder for creating a Ingridient entity.
type IngridientCreate struct {
	config
	mutation *IngridientMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *IngridientCreate) SetName(s string) *IngridientCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetAlcohol sets the "alcohol" field.
func (ic *IngridientCreate) SetAlcohol(f float64) *IngridientCreate {
	ic.mutation.SetAlcohol(f)
	return ic
}

// SetNillableAlcohol sets the "alcohol" field if the given value is not nil.
func (ic *IngridientCreate) SetNillableAlcohol(f *float64) *IngridientCreate {
	if f != nil {
		ic.SetAlcohol(*f)
	}
	return ic
}

// SetIsDry sets the "isDry" field.
func (ic *IngridientCreate) SetIsDry(b bool) *IngridientCreate {
	ic.mutation.SetIsDry(b)
	return ic
}

// SetNillableIsDry sets the "isDry" field if the given value is not nil.
func (ic *IngridientCreate) SetNillableIsDry(b *bool) *IngridientCreate {
	if b != nil {
		ic.SetIsDry(*b)
	}
	return ic
}

// SetMeasurmentUnit sets the "measurmentUnit" field.
func (ic *IngridientCreate) SetMeasurmentUnit(iu ingridient.MeasurmentUnit) *IngridientCreate {
	ic.mutation.SetMeasurmentUnit(iu)
	return ic
}

// SetNillableMeasurmentUnit sets the "measurmentUnit" field if the given value is not nil.
func (ic *IngridientCreate) SetNillableMeasurmentUnit(iu *ingridient.MeasurmentUnit) *IngridientCreate {
	if iu != nil {
		ic.SetMeasurmentUnit(*iu)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IngridientCreate) SetID(u uuid.UUID) *IngridientCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IngridientCreate) SetNillableID(u *uuid.UUID) *IngridientCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddStockIDs adds the "stock" edge to the Stockpile entity by IDs.
func (ic *IngridientCreate) AddStockIDs(ids ...int) *IngridientCreate {
	ic.mutation.AddStockIDs(ids...)
	return ic
}

// AddStock adds the "stock" edges to the Stockpile entity.
func (ic *IngridientCreate) AddStock(s ...*Stockpile) *IngridientCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ic.AddStockIDs(ids...)
}

// Mutation returns the IngridientMutation object of the builder.
func (ic *IngridientCreate) Mutation() *IngridientMutation {
	return ic.mutation
}

// Save creates the Ingridient in the database.
func (ic *IngridientCreate) Save(ctx context.Context) (*Ingridient, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IngridientCreate) SaveX(ctx context.Context) *Ingridient {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IngridientCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IngridientCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IngridientCreate) defaults() {
	if _, ok := ic.mutation.Alcohol(); !ok {
		v := ingridient.DefaultAlcohol
		ic.mutation.SetAlcohol(v)
	}
	if _, ok := ic.mutation.IsDry(); !ok {
		v := ingridient.DefaultIsDry
		ic.mutation.SetIsDry(v)
	}
	if _, ok := ic.mutation.MeasurmentUnit(); !ok {
		v := ingridient.DefaultMeasurmentUnit
		ic.mutation.SetMeasurmentUnit(v)
	}
	if _, ok := ic.mutation.ID(); !ok {
		v := ingridient.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IngridientCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Ingridient.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := ingridient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Ingridient.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Alcohol(); !ok {
		return &ValidationError{Name: "alcohol", err: errors.New(`ent: missing required field "Ingridient.alcohol"`)}
	}
	if _, ok := ic.mutation.IsDry(); !ok {
		return &ValidationError{Name: "isDry", err: errors.New(`ent: missing required field "Ingridient.isDry"`)}
	}
	if _, ok := ic.mutation.MeasurmentUnit(); !ok {
		return &ValidationError{Name: "measurmentUnit", err: errors.New(`ent: missing required field "Ingridient.measurmentUnit"`)}
	}
	if v, ok := ic.mutation.MeasurmentUnit(); ok {
		if err := ingridient.MeasurmentUnitValidator(v); err != nil {
			return &ValidationError{Name: "measurmentUnit", err: fmt.Errorf(`ent: validator failed for field "Ingridient.measurmentUnit": %w`, err)}
		}
	}
	return nil
}

func (ic *IngridientCreate) sqlSave(ctx context.Context) (*Ingridient, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IngridientCreate) createSpec() (*Ingridient, *sqlgraph.CreateSpec) {
	var (
		_node = &Ingridient{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(ingridient.Table, sqlgraph.NewFieldSpec(ingridient.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(ingridient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Alcohol(); ok {
		_spec.SetField(ingridient.FieldAlcohol, field.TypeFloat64, value)
		_node.Alcohol = value
	}
	if value, ok := ic.mutation.IsDry(); ok {
		_spec.SetField(ingridient.FieldIsDry, field.TypeBool, value)
		_node.IsDry = value
	}
	if value, ok := ic.mutation.MeasurmentUnit(); ok {
		_spec.SetField(ingridient.FieldMeasurmentUnit, field.TypeEnum, value)
		_node.MeasurmentUnit = value
	}
	if nodes := ic.mutation.StockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ingridient.StockTable,
			Columns: []string{ingridient.StockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockpile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IngridientCreateBulk is the builder for creating many Ingridient entities in bulk.
type IngridientCreateBulk struct {
	config
	err      error
	builders []*IngridientCreate
}

// Save creates the Ingridient entities in the database.
func (icb *IngridientCreateBulk) Save(ctx context.Context) ([]*Ingridient, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ingridient, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IngridientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IngridientCreateBulk) SaveX(ctx context.Context) []*Ingridient {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IngridientCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IngridientCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
