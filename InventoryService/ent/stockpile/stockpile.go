// Code generated by ent, DO NOT EDIT.

package stockpile

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the stockpile type in the database.
	Label = "stockpile"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIngridientId holds the string denoting the ingridientid field in the database.
	FieldIngridientId = "ingridient_id"
	// FieldOwnerId holds the string denoting the ownerid field in the database.
	FieldOwnerId = "owner_id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// EdgeIngridient holds the string denoting the ingridient edge name in mutations.
	EdgeIngridient = "ingridient"
	// Table holds the table name of the stockpile in the database.
	Table = "stockpiles"
	// IngridientTable is the table that holds the ingridient relation/edge.
	IngridientTable = "stockpiles"
	// IngridientInverseTable is the table name for the Ingridient entity.
	// It exists in this package in order to avoid circular dependency with the "ingridient" package.
	IngridientInverseTable = "ingridients"
	// IngridientColumn is the table column denoting the ingridient relation/edge.
	IngridientColumn = "ingridient_stock"
)

// Columns holds all SQL columns for stockpile fields.
var Columns = []string{
	FieldID,
	FieldIngridientId,
	FieldOwnerId,
	FieldQuantity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "stockpiles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"ingridient_stock",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Stockpile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIngridientId orders the results by the ingridientId field.
func ByIngridientId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIngridientId, opts...).ToFunc()
}

// ByOwnerId orders the results by the ownerId field.
func ByOwnerId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerId, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByIngridientField orders the results by ingridient field.
func ByIngridientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIngridientStep(), sql.OrderByField(field, opts...))
	}
}
func newIngridientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IngridientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IngridientTable, IngridientColumn),
	)
}
